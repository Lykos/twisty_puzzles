module TwistyPuzzles
  # rubocop:disable Style/Documentation
  class CommutatorParseError < TwistyPuzzlesError
  end

  # Parser for commutators and algorithms.
  class Parser
    OPENING_BRACKET: ::String

    OPENING_PAREN: ::String

    CLOSING_BRACKET: ::String

    CLOSING_PAREN: ::String

    SLASH: ::String

    COMMA: ::String

    SETUP_SEPARATORS: ::Array[::String]

    PURE_SEPARATORS: ::Array[::String]

    SEPARATORS: ::Array[::String]

    TIMES: ::String

    def initialize: (::String alg_string, AbstractMoveParser move_parser) -> untyped

    def parse_open_paren: () -> untyped

    def parse_close_paren: () -> untyped

    def parse_times: () -> untyped

    def parse_factor: () -> ::Integer

    def parse_multiplier: () -> ::Integer

    def parse_trigger: () -> Algorithm

    # Parses at least one move and allows for triggers in parentheses.
    def parse_nonempty_moves_with_triggers: () -> Algorithm

    def parse_moves_with_triggers: () -> Algorithm

    # Parses at least one move.
    def parse_nonempty_moves: () -> Algorithm

    # Parses a series of moves.
    def parse_moves: () -> Algorithm

    def complain: (untyped parsed_object) -> untyped

    def check_eos: (untyped parsed_object) -> untyped

    def parse_open_bracket: () -> untyped

    def parse_close_bracket: () -> untyped

    def parse_commutator: () -> Commutator

    def parse_commutator_no_brackets: () -> Commutator

    def parse_algorithm: () -> Algorithm

    def parse_setup_commutator_inner: () -> Commutator

    def parse_pure_commutator: () -> Commutator

    def parse_pure_commutator_no_brackets: () -> Commutator

    def parse_pure_separator: () -> ::String

    def parse_commutator_internal_after_separator: (Algorithm setup_or_first_part, ::String separator) -> Commutator

    def pseudo_pure_commutator: (::String separator, Algorithm first_part, Algorithm second_part) -> PureCommutator

    def parse_separator: () -> ::String

    def parse_commutator_internal: () -> Commutator

    def parse_move_internal: () -> (nil | AbstractMove)

    def skip_spaces: () -> untyped
  end

  def parse_commutator: (::String alg_string, ?complete_parse: bool complete_parse) -> Commutator

  def parse_cube_algorithm: (::String alg_string, ?complete_parse: bool complete_parse) -> Algorithm

  def parse_cube_move: (::String move_string) -> CubeMove

  alias parse_algorithm parse_cube_algorithm

  alias parse_move parse_cube_move

  def parse_skewb_algorithm: (::String alg_string, SkewbNotation notation, ?complete_parse: bool complete_parse) -> Algorithm

  def parse_skewb_move: (::String move_string, SkewbNotation notation) -> SkewbMove
end

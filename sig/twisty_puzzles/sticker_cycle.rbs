module TwistyPuzzles
  # A sticker cycle that can be applied to a cube state.
  class StickerCycle
    include ReversibleApplyable

    def self.from_coordinates: (Integer cube_size, ::Array[Coordinate]) -> StickerCycle
    
    def initialize: (Native::StickerCycle native) -> untyped

    attr_reader native: Native::StickerCycle

    def eql?: (untyped other) -> bool

    alias == eql?

    def hash: () -> ::Integer

    def cube_size: () -> ::Integer

    def length: () -> ::Integer

    def apply_to: (CubeState cube_state) -> untyped

    def inverse: () -> StickerCycle
  end

  # A set of disjoint sticker cycles that can be applied to a cube state together
  class StickerCycles
    include ReversibleApplyable

    def initialize: (::Integer cube_size, ::Array[StickerCycle] sticker_cycles) -> untyped

    attr_reader cube_size: ::Integer

    attr_reader sticker_cycles: ::Array[StickerCycle]

    def apply_to: (CubeState cube_state) -> untyped

    def +: (StickerCycles other) -> StickerCycles

    def inverse: () -> StickerCycles
  end
end

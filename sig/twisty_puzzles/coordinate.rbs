module TwistyPuzzles
  # Coordinate of a sticker on the cube.
  class Coordinate
    def self.highest_coordinate: (untyped cube_size) -> untyped

    def self.invert_coordinate: (untyped index, untyped cube_size) -> untyped

    def self.coordinate_range: (untyped cube_size) -> untyped

    def self.middle: (untyped cube_size) -> untyped

    # Middle coordinate for uneven numbers, the one before for even numbers
    def self.middle_or_before: (untyped cube_size) -> untyped

    # Middle coordinate for uneven numbers, the one after for even numbers
    def self.middle_or_after: (untyped cube_size) -> untyped

    # The last coordinate that is strictly before the middle
    def self.last_before_middle: (untyped cube_size) -> untyped

    def self.canonicalize: (untyped index, untyped cube_size) -> untyped

    def self.from_face_distances: (untyped face, untyped cube_size, untyped face_distances) -> untyped

    def self.match_coordinate_internal: (untyped base_coordinate, untyped other_face_symbols) -> untyped

    # The coordinate of the solved position of the main sticker of this part.
    def self.solved_position: (Part part, Integer cube_size, Integer incarnation_index) -> untyped

    # The coordinate of the solved position of all stickers of this part.
    # rubocop:disable Metrics/AbcSize
    def self.solved_positions: (untyped part, untyped cube_size, untyped incarnation_index) -> untyped

    def self.center: (untyped face, untyped cube_size) -> untyped

    def self.edges_outside: (untyped face, untyped cube_size) -> untyped

    def self.from_indices: (untyped face, untyped cube_size, untyped x_index, untyped y_index) -> untyped

    def initialize: (untyped native) -> untyped

    attr_reader native: untyped

    def face: () -> untyped

    def cube_size: () -> untyped

    def coordinate: (untyped coordinate_index) -> untyped

    def coordinates: () -> untyped

    def x: () -> untyped

    def y: () -> untyped

    def eql?: (untyped other) -> untyped

    alias == eql?

    def hash: () -> untyped

    def can_jump_to?: (untyped to_face) -> untyped

    def jump_to_neighbor: (untyped to_face) -> untyped

    def jump_to_coordinates: (untyped new_coordinates) -> untyped

    def make_coordinate_at_edge_to: (untyped face) -> untyped

    # Returns neighbor faces that are closer to this coordinate than their opposite face.
    def close_neighbor_faces: () -> untyped

    def after_middle?: (untyped index) -> untyped

    def before_middle?: (untyped index) -> untyped

    # On a nxn grid with integer coordinates between 0 and n - 1, iterates between the 4 points
    # that point (x, y) hits if you rotate by 90 degrees.
    def rotate: () -> untyped

    # On a nxn grid with integer coordinates between 0 and n - 1, give the 4 points that point
    # (x, y) hits if you do a full rotation of the face in clockwise order.
    def rotations: () -> untyped
  end

  # Coordinate of a sticker on the Skewb.
  class SkewbCoordinate
    include Comparable

    include CubeConstants

    def initialize: (untyped face, untyped coordinate, untyped native) -> untyped

    attr_reader native: untyped

    attr_reader coordinate: untyped

    def self.for_center: (untyped face) -> untyped

    def self.corners_on_face: (untyped face) -> untyped

    def self.for_corner: (untyped corner) -> untyped

    def hash: () -> untyped

    def eql?: (untyped other) -> untyped

    alias == eql?

    def <=>: (untyped other) -> untyped

    def face: () -> untyped
  end
end
